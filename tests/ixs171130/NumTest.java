package ixs171130;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.EmptyStackException;
import java.util.NoSuchElementException;

import static org.junit.jupiter.api.Assertions.*;

class NumTest {
    @Test
    void testStringConstructorWithDefaultBase() {
        // testing for a multiple of base
        Num x = new Num("10000");
        assertEquals("1000000000: 10000", x.returnListAsString());
        assertEquals("10000", x.toString());

        // testing for a small number
        x = new Num("100");
        assertEquals("1000000000: 100", x.returnListAsString());
        assertEquals("100", x.toString());

        // testing with more zeroes
        x = new Num("100000000000");
        assertEquals("1000000000: 0 100", x.returnListAsString());
        assertEquals("100000000000", x.toString());

        // testing for a (small) non-multiple of the base
        Num y = new Num("567");
        assertEquals("1000000000: 567", y.returnListAsString());
        assertEquals("567", y.toString());

        // testing for a (long) non-multiple of the base
        Num z = new Num("45895361142");
        assertEquals("1000000000: 895361142 45", z.returnListAsString());

        // testing for negative number
        Num a = new Num("-1");
        assertEquals("1000000000: 1", a.returnListAsString());
        assertTrue(a.isNegative);

        // testing for a large negative number
        Num b = new Num("-12546731");
        assertEquals("1000000000: 12546731", b.returnListAsString());
        assertTrue(b.isNegative);

        // large number with single digits in middle
        b = new Num("1015578");
        assertEquals("1000000000: 1015578", b.returnListAsString());
        assertEquals("1015578", b.toString());
        assertFalse(b.isNegative);

        // testing for zero
        Num c = new Num("0");
        assertEquals("1000000000: 0", c.returnListAsString());

        // long string of zeroes
        Num d = new Num("00000000000");
        assertEquals("1000000000: 0", d.returnListAsString());
    }

    @Test
    void testLongConstructorWithDefaultBase() { // add bigger numbers
        // testing for a multiple of a base
        Num x = new Num(10000);
        assertEquals("1000000000: 10000", x.returnListAsString());

        // testing for a small non-multiple of base
        x = new Num(57);
        assertEquals("1000000000: 57", x.returnListAsString());
        assertFalse(x.isNegative);

        // testing for a small negative number
        x = new Num(-5);
        assertEquals("1000000000: 5", x.returnListAsString());
        assertTrue(x.isNegative);

        // testing for a large negative number
        x = new Num(-6589423);
        assertEquals("1000000000: 6589423", x.returnListAsString());
        assertTrue(x.isNegative);

        // testing for 0
        x = new Num(0);
        assertEquals("1000000000: 0", x.returnListAsString());
        assertFalse(x.isNegative);

        // largest long possible
        x = new Num(9223372036854775807L);
        assertEquals("1000000000: 854775807 223372036 9", x.returnListAsString());
        assertFalse(x.isNegative);
        assertEquals("9223372036854775807", x.toString());

        // smallest possible long
        x = new Num(-9223372036854775807L);
        assertEquals("1000000000: 854775807 223372036 9", x.returnListAsString());
        assertTrue(x.isNegative);
        assertEquals("-9223372036854775807", x.toString());
    }

    @Test
    void testStringConstructorExceptions() {
        // nothing passed
        assertThrows(ArithmeticException.class, () -> {
            Num a = new Num("");
        });
    }

    @Test
    void testAdd() {
        Num x, y, result;

        // add two zeroes
        x = new Num(0);
        y = new Num(0);
        result = Num.add(x, y);
        assertEquals("0", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);

        // add two small numbers
        x = new Num(123);
        y = new Num("4567");
        result = Num.add(x, y);
        assertEquals("4690", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);


        // add two large numbers
        x = new Num("15248695712464651165");
        y = new Num("125485784");
        result = Num.add(x, y);
        assertEquals("15248695712590136949", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);

        // add a positive and a negative number
        x = new Num("1");
        y = new Num("-1");
        result = Num.add(x, y);
        assertEquals("0", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);

        // add a positive and a negative number
        x = new Num("340282366920938463463374607431768211456");
        y = new Num("-1");
        result = Num.add(x, y);
        assertEquals("340282366920938463463374607431768211455", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);

        // add HUGE numbers
        x = new Num("38751659661118868378801805060560750618956004954420780687454447426067254023361904353879716806318072303632004901872622065474757661484076076463412607769016728305461123159982915326562770671339246330315370310983606835801639765924688765699120562639895559322085244405382127426522422716938287626862653660807590713624169056795241831460396841890769792371429502964019775390625");
        y = new Num("34143115322784228849944935551113819944806873883247339368564776954250143409");
        result = Num.add(x, y);
        assertEquals("38751659661118868378801805060560750618956004954420780687454447426067254023361904353879716806318072303632004901872622065474757661484076076463412607769016728305461123159982915326562770671339246330315370310983606835801639765924688765699120562639895559322085244405382127426522422716938287626862687803922913497853019001730792945280341648764653039710798067740974025534034", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);

        // add first number negative, second positive
        x = new Num("-1");
        y = new Num("1");
        result = Num.add(x, y);
        assertEquals("0", result.toString());
        assertFalse(result.isNegative);
        assertEquals(1000000000L, result.base);
    }

    @Test
    void testSubtractionWhenNumbersAreEqual() {
        Num x, y, result;

        // subtract 0 from 0
        x = new Num(0);
        y = new Num("0");
        result = Num.subtract(x, y);
        assertEquals("0", result.toString());

        // subtract two equal +ve numbers
        x = new Num(100);
        y = new Num("100");
        result = Num.subtract(x, y);
        assertEquals("0", result.toString());

        // subtract two equal -ve numbers
        x = new Num("-123456789");
        y = new Num(-123456789);
        result = Num.subtract(x, y);
        assertEquals("0", result.toString());
    }

    @Test
    void testSubtractionWhenXIsGreaterThanY() {
        Num x, y, result;

        // testing when y is zero
        x = new Num("460");
        y = new Num(0);
        result = Num.subtract(x, y);
        assertEquals("460", result.toString());
        assertFalse(result.isNegative);

        // when x is positive and y is negative, with a smaller number
        x = new Num("5");
        y = new Num("-3");
        result = Num.subtract(x, y);
        assertEquals("8", result.toString());

        x = new Num("100000000000");
        y = new Num(9);
        result = Num.subtract(x, y);
        assertEquals("99999999991", result.toString());

        x = new Num("100000000000");
        y = new Num(1);
        result = Num.subtract(x, y);
        assertEquals("99999999999", result.toString());

        // when x is positive and y is negative, with a large number
        x = new Num("15248597586485754648891564");
        y = new Num("-48915198495619845641984");
        result = Num.subtract(x, y);  // 15297512784981374494533548
        assertEquals("15297512784981374494533548", result.toString());
        assertFalse(result.isNegative);

        // when x and y both are negative
        x = new Num("-15");
        y = new Num("-30");
        result = Num.subtract(x, y);
        assertEquals("15", result.toString());
        assertFalse(result.isNegative);

        // when x and y are both negative, differ by 1
        x = new Num("-16");
        y = new Num("-17");
        result = Num.subtract(x, y);
        assertEquals("1", result.toString());
        assertFalse(result.isNegative);

        // when x and y both are negative, large numbers
        x = new Num("-152485618");
        y = new Num("-15949549846514987951598798484987");
        result = Num.subtract(x, y);
        assertEquals("15949549846514987951598645999369", result.toString());
        assertFalse(result.isNegative);

        // when x and y are both positive
        x = new Num("15249846519841321984984");
        y = new Num("15489156949841897");
        result = Num.subtract(x, y);
        assertEquals("15249831030684372143087", result.toString());
        assertFalse(result.isNegative);

        // x, y both positive, with smaller number
        x = new Num(10);
        y = new Num(9);
        result = Num.subtract(x, y);
        assertEquals("1", result.toString());
        assertFalse(result.isNegative);
    }

    @Test
    void testSubtractionWhenYIsGreaterThanX() {
        Num x, y, result;

        // testing when x is zero
        x = new Num(0);
        y = new Num(460);
        result = Num.subtract(x, y);
        assertEquals("-460", result.toString());
        assertTrue(result.isNegative);

        // with a smaller number
        x = new Num(-5);
        y = new Num("3");
        result = Num.subtract(x, y);
        assertEquals("-8", result.toString());
        assertTrue(result.isNegative);

        // with large numbers
        x = new Num("-54787498494159798465456465498168798165498465198798465");
        y = new Num("549879851894548978951987891489789459549545594554564");
        result = Num.subtract(x, y);
        assertEquals("-55337378346054347444408453389658587625048010793353029", result.toString());
        assertTrue(result.isNegative);

        // when both are positive
        x = new Num(10);
        y = new Num(20);
        result = Num.subtract(x, y);
        assertEquals("-10", result.toString());
        assertTrue(result.isNegative);

        // when both are positive, large numbers
        x = new Num("4854894654984651978964598798444");
        y = new Num("65469849468489484749654897894151654651654654656");
        result = Num.subtract(x, y);
        assertEquals("-65469849468489479894760242909499675687055856212", result.toString());
        assertTrue(result.isNegative);

        // edge case
        x = new Num(685050);
        y = new Num(1234567);
        result = Num.subtract(x, y);
        assertEquals("-549517", result.toString());
        assertTrue(result.isNegative);

        // when both are positive, with only 1 digit more in second
        x = new Num("4564984351654321894132165743516546546");
        y = new Num("45649843516543218941321657435165465462");
        result = Num.subtract(x, y);
        assertEquals("-41084859164888897047189491691648918916", result.toString());
        assertTrue(result.isNegative);

        // when both are negative
        x = new Num("-4519816518498165496546");
        y = new Num("-959849465");
        result = Num.subtract(x, y);
        assertEquals("-4519816518497205647081", result.toString());

        // when both are negative, small difference
        x = new Num("1234567");
        y = new Num("925925");
        result = Num.subtract(x, y);
        assertEquals("308642", result.toString());
        //result.printList();
        //System.out.println(" len " + result.len);
        assertFalse(result.isNegative);
    }

    @Test
    void testSubtractWithLargeNumbers() {
        Num x, y, result;

        // subtract two large numbers, both ways
        x = new Num("33611141580816492842483407931259094246356138012487074041247823444945272516226885640710916958365023962831114257540237");
        y = new Num("868961758838235800287756364471948378335796838288975942380290688618631629298190451688200804595799187620583691268029782284423459421328787441070241643294159775050113833420284747674478527063285036001");
        result = Num.subtract(x, y);
        assertEquals("-868961758838235800287756364471948378335796838288975942380290688618631629298190418077059223779306345137175760008935535928285446934254746193246796698021643548164473122503326382650515695949027495764",
                result.toString());
        assertTrue(result.isNegative);
        result = Num.subtract(y, x);
        assertEquals("868961758838235800287756364471948378335796838288975942380290688618631629298190418077059223779306345137175760008935535928285446934254746193246796698021643548164473122503326382650515695949027495764",
                result.toString());
        assertFalse(result.isNegative);

        // subtract two negative numbers
        x = new Num("-22838422686555587263948685490152318882035472844501809360976087896337614957874991896849190676558796921891771164421806480340889836627951616");
        y = new Num("-40159526927620481646000322676629816996929091843685756139806942025541935596108702291164656468513971532274808851070702075958251953125");
        result = Num.subtract(x, y);
        assertEquals("-22838382527028659643467039489829642252218475915409965675219948089395589415939395788146899511902328407920238889612955409638813878375998491", result.toString());
        assertTrue(result.isNegative);
        result = Num.subtract(y, x);
        assertEquals("22838382527028659643467039489829642252218475915409965675219948089395589415939395788146899511902328407920238889612955409638813878375998491", result.toString());
        assertFalse(result.isNegative);

        // one negative, one positive number
        x = new Num("53010368591190628480063130338422958370577432613813872637115298871391407445502614942050612115961368925873910378570017882469581789454073574272995355910643655165347617893769670964933586368499639693628623698705481149589913578377142082315597873441");
        y = new Num("-15081278524875458459524077327366935184409295858957501168008577210113539611260640924935990839015017504565177128962418871388530154553971913742205812306709276699443677230682801881879072144182675717519005159470861087589068693746909");
        result = Num.subtract(x, y);
        assertEquals("53010368591190643561341655213881417894654759980749057046411157828892575454079825055590223376602293861864749393587522447646710751872944962803149909882557397371159924603046370408610817051301521572700767881381198668595073049238229671384291620350", result.toString());
        assertFalse(result.isNegative);
        result = Num.subtract(y, x);
        assertEquals("-53010368591190643561341655213881417894654759980749057046411157828892575454079825055590223376602293861864749393587522447646710751872944962803149909882557397371159924603046370408610817051301521572700767881381198668595073049238229671384291620350", result.toString());
        assertTrue(result.isNegative);
    }

    @Test
    void testProduct() {
        Num x, y, z;

        x = new Num("123");
        y = new Num("456");
        z = Num.product(x, y);
        assertEquals("56088", z.toString());
        assertFalse(z.isNegative);

        x = new Num("0");
        y = new Num("456");
        z = Num.product(x, y);
        assertEquals("0", z.toString());

        x = new Num("0");
        y = new Num("0");
        z = Num.product(x, y);
        assertEquals("0", z.toString());

        x = new Num("-123");
        y = new Num("456");
        z = Num.product(x, y);
        assertEquals("-56088", z.toString());
        assertTrue(z.isNegative);

        x = new Num("12");
        y = new Num("-456");
        z = Num.product(x, y);
        assertEquals("-5472", z.toString());
        assertTrue(z.isNegative);

        x = new Num("-123456789101112");
        y = new Num("-456784658437654366");
        z = Num.product(x, y);
        assertEquals("56393167241360975102138882254992", z.toString());
        assertFalse(z.isNegative);

        x = new Num("4567");
        y = new Num("1080246");
        z = Num.product(x, y);
        assertEquals("4933483482", z.toString());

        // x = 28 ^ 540
        // y = 13 ^ 84
        x = new Num("29196912262690298697045171071227564667260040436654339882287194485474630657870546367627144185053964113592547355970714484223912042291161019105640632371547944218880214849133181997332788158415772848396554915079645902880272442817043048898706769393688933879297149003809212636558877023082323564293874940872076386825171044682365925699065304114631792427532965213503105785220460814649755336659862797656305439311545983473599081661801698567091178877803907453943123722970372982525212624171439809484096979220883764380151628012762433570590302641717158112502015019542249883120121190308477019682449261590015817038256590322559842362019402535080261179511808499652544512915318827152110764198584811211481834406243372755960701878873305848159037654161095762525391821561330974600078914959432423289363890176");
        y = new Num("3725989217506060809913745704292352543926459628485989232909583897978821195955532381542525335761");
        z = Num.product(x, y);
        assertEquals("108787380275254537422337083407026541576926897494191558807982244178598088829595237192947277407770235863712469991693305062389297849503698887410432173943392683321434472115618165118613723850111997480286408022199417547898629700568548933149364301954599755641074294596849652317165881924486562945994213785472548960936498168683073779424624070113138364429776499280762341622224654906650875393660036532443332935781538469350188315122783260231740664223080760134775100975177519410083912906626686144110013382233627959394458285142743640869171387399096706084385244595160423488689360170424104886272860927913092260023619322662526822291094334930253525621243219137215628620600504763341730217438819615791150930258651370498419769189174473087059913470785708657517529888895005661010352338330135209410809565852629750724015623571966490634381842054470959371063186443247247513669451414347809633843529383936", z.toString());

        // making one number negative
        x.isNegative = true;
        z = Num.product(x, y);
        assertEquals("-108787380275254537422337083407026541576926897494191558807982244178598088829595237192947277407770235863712469991693305062389297849503698887410432173943392683321434472115618165118613723850111997480286408022199417547898629700568548933149364301954599755641074294596849652317165881924486562945994213785472548960936498168683073779424624070113138364429776499280762341622224654906650875393660036532443332935781538469350188315122783260231740664223080760134775100975177519410083912906626686144110013382233627959394458285142743640869171387399096706084385244595160423488689360170424104886272860927913092260023619322662526822291094334930253525621243219137215628620600504763341730217438819615791150930258651370498419769189174473087059913470785708657517529888895005661010352338330135209410809565852629750724015623571966490634381842054470959371063186443247247513669451414347809633843529383936", z.toString());
        assertTrue(z.isNegative);

        // making y also negative
        y.isNegative = true;
        z = Num.product(x, y);
        assertEquals("108787380275254537422337083407026541576926897494191558807982244178598088829595237192947277407770235863712469991693305062389297849503698887410432173943392683321434472115618165118613723850111997480286408022199417547898629700568548933149364301954599755641074294596849652317165881924486562945994213785472548960936498168683073779424624070113138364429776499280762341622224654906650875393660036532443332935781538469350188315122783260231740664223080760134775100975177519410083912906626686144110013382233627959394458285142743640869171387399096706084385244595160423488689360170424104886272860927913092260023619322662526822291094334930253525621243219137215628620600504763341730217438819615791150930258651370498419769189174473087059913470785708657517529888895005661010352338330135209410809565852629750724015623571966490634381842054470959371063186443247247513669451414347809633843529383936", z.toString());
        assertFalse(z.isNegative);

        // testing with a large number and a small one
        x = new Num("108787380275254537422337083407026541576926897494191558807982244178598088829595237192947277407770235863712469991693305062389297849503698887410432173943392683321434472115618165118613723850111997480286408022199417547898629700568548933149364301954599755641074294596849652317165881924486562945994213785472548960936498168683073779424624070113138364429776499280762341622224654906650875393660036532443332935781538469350188315122783260231740664223080760134775100975177519410083912906626686144110013382233627959394458285142743640869171387399096706084385244595160423488689360170424104886272860927913092260023619322662526822291094334930253525621243219137215628620600504763341730217438819615791150930258651370498419769189174473087059913470785708657517529888895005661010352338330135209410809565852629750724015623571966490634381842054470959371063186443247247513669451414347809633843529383936");
        y = new Num("5");
        z = Num.product(x, y);
        assertEquals("543936901376272687111685417035132707884634487470957794039911220892990444147976185964736387038851179318562349958466525311946489247518494437052160869716963416607172360578090825593068619250559987401432040110997087739493148502842744665746821509772998778205371472984248261585829409622432814729971068927362744804682490843415368897123120350565691822148882496403811708111123274533254376968300182662216664678907692346750941575613916301158703321115403800673875504875887597050419564533133430720550066911168139796972291425713718204345856936995483530421926222975802117443446800852120524431364304639565461300118096613312634111455471674651267628106216095686078143103002523816708651087194098078955754651293256852492098845945872365435299567353928543287587649444475028305051761691650676047054047829263148753620078117859832453171909210272354796855315932216236237568347257071739048169217646919680", z.toString());
        assertFalse(z.isNegative);
    }

    @Test
    void testCompareTo() {
        // testing with same numbers
        Num x, y;
        x = new Num("24536789456123");
        y = new Num("24536789456123");

        assertEquals(0, x.compareTo(y));

        // testing with one positive and one negative number
        x = new Num("24536789456123");
        y = new Num("-24536789456123");
        assertEquals(1, x.compareTo(y));

        // testing with one negative and one positive number
        x = new Num("-24536789456123");
        y = new Num("24536789456123");
        assertEquals(-1, x.compareTo(y));

        // testing with both negative numbers
        x = new Num("-24536789456123");
        y = new Num("-24536789456123");
        assertEquals(0, x.compareTo(y));

        // testing when first number is different length
        x = new Num("1548964165749845");
        y = new Num("145215");
        assertEquals(1, x.compareTo(y));

        // testing when second number is different length
        x = new Num("126453165");
        y = new Num("458198765165798435198794");
        assertEquals(-1, x.compareTo(y));

        // testing with different length numbers where one is +ve and one is -ve
        x = new Num("15894561984651");
        y = new Num("-5498124984231543516549846");
        assertEquals(1, x.compareTo(y));

        // just reverse of previous
        assertEquals(-1, y.compareTo(x));

        // both negative numbers
        x = new Num("-15489165987");
        y = new Num("-15489165987");
        assertEquals(0, x.compareTo(y));
        assertEquals(0, y.compareTo(x));

        // two zeroes
        x = new Num("0");
        y = new Num("0");
        assertEquals(0, x.compareTo(y));
        assertEquals(0, y.compareTo(x));

        // two negative numbers smaller than base
        x = new Num("-15");
        y = new Num("-30");
        assertEquals(1, x.compareTo(y));
        assertEquals(-1, y.compareTo(x));

        // one positive, one negative. Both smaller than base
        x = new Num("15");
        y = new Num("-30");
        assertEquals(1, x.compareTo(y));
        assertEquals(-1, y.compareTo(x));

        x = new Num("-152485618");
        y = new Num("-15949549846514987951598798484987");
        assertEquals(1, x.compareTo(y));
        assertEquals(-1, y.compareTo(x));
    }

    @Test
    void testToString() {
        // zero!
        Num x = new Num(0);
        assertEquals("0", x.toString());

        // negative number
        x = new Num("-15981587984132549845216879841321063846321068949684");
        assertEquals("-15981587984132549845216879841321063846321068949684", x.toString());

        // a large random number
        x = new Num("1123446891891879512198946152197987494");
        assertEquals("1123446891891879512198946152197987494", x.toString());
    }

    @Test
    void testBy2() {
        Num x, y, z;

        x = new Num("1234567891234567891230");
        assertEquals("617283945617283945615" , x.by2().toString());

        x = new Num("123456789123456789123456789123456789123456789");
        assertEquals("61728394561728394561728394561728394561728394" , x.by2().toString());

        x = new Num(0);
        assertEquals("0", x.by2().toString());

        x = new Num("-256");
        assertEquals("-128", x.by2().toString());
    }

    @Test
    void testDivide() {
        Num x, y, z;

        x = new Num("123456789");
        y = new Num("4567");
        assertEquals("27032", Num.divide(x, y).toString());

        x = new Num("-123456789");
        y = new Num("4567");
        assertEquals("-27032", Num.divide(x, y).toString());

        x = new Num("123456789");
        y = new Num("-4567");
        assertEquals("-27032", Num.divide(x, y).toString());

        x = new Num("-123456789");
        y = new Num("-4567");
        assertEquals("27032", Num.divide(x, y).toString());

        x = new Num("0");
        y = new Num("-4567");
        assertEquals("0", Num.divide(x, y).toString());

        x = new Num("-4567");
        y = new Num("0");
        assertNull(Num.divide(x, y));

        x = new Num("0");
        y = new Num("0");
        assertNull(Num.divide(x, y));

        // x = 97 ^ 99
        // y = 85 ^ 67
        x = new Num("49023204046810063052865617754531993076026071520903088968920741451572890340395967569520426628951284340118127138453851707836951742337890127232804456106417984709109735388024795899433618241972372230433");
        y = new Num("1866672041827527715527831152271703341950348043011081482789361986997870193300504817874555137102721147357442532666027545928955078125");
        z = Num.divide(x, y);
        assertEquals("26262355115585746494653955611056081647313202578455754479708388427586", z.toString());

        z = Num.divide(y, x);
        assertEquals("0", z.toString());
    }

    @Test
    void testPower() {
        Num x, z;
        Long y;
        x = new Num(97);
        y = 99L;
        z = Num.power(x, y);
        assertEquals("49023204046810063052865617754531993076026071520903088968920741451572890340395967569520426628951284340118127138453851707836951742337890127232804456106417984709109735388024795899433618241972372230433", z.toString());

        x = new Num(10);
        y = 0L;
        z = Num.power(x, y);
        assertEquals("1", z.toString());

        x = new Num("85");
        y = 67L;
        z = Num.power(x, y);
        assertEquals("1866672041827527715527831152271703341950348043011081482789361986997870193300504817874555137102721147357442532666027545928955078125", z.toString());

        // putting y as largest Long possible, because why not?
        x = new Num("1");
        y = 9223372036854775807L;
        z = Num.power(x, y);
        assertEquals("1", z.toString());

        x = new Num("0");
        y = 9223372036854775807L;
        z = Num.power(x, y);
        assertEquals("0", z.toString());

        x = new Num(2);
        y = 10000L;
        z = Num.power(x, y);
        assertEquals("19950631168807583848837421626835850838234968318861924548520089498529438830221946631919961684036194597899331129423209124271556491349413781117593785932096323957855730046793794526765246551266059895520550086918193311542508608460618104685509074866089624888090489894838009253941633257850621568309473902556912388065225096643874441046759871626985453222868538161694315775629640762836880760732228535091641476183956381458969463899410840960536267821064621427333394036525565649530603142680234969400335934316651459297773279665775606172582031407994198179607378245683762280037302885487251900834464581454650557929601414833921615734588139257095379769119277800826957735674444123062018757836325502728323789270710373802866393031428133241401624195671690574061419654342324638801248856147305207431992259611796250130992860241708340807605932320161268492288496255841312844061536738951487114256315111089745514203313820202931640957596464756010405845841566072044962867016515061920631004186422275908670900574606417856951911456055068251250406007519842261898059237118054444788072906395242548339221982707404473162376760846613033778706039803413197133493654622700563169937455508241780972810983291314403571877524768509857276937926433221599399876886660808368837838027643282775172273657572744784112294389733810861607423253291974813120197604178281965697475898164531258434135959862784130128185406283476649088690521047580882615823961985770122407044330583075869039319604603404973156583208672105913300903752823415539745394397715257455290510212310947321610753474825740775273986348298498340756937955646638621874569499279016572103701364433135817214311791398222983845847334440270964182851005072927748364550578634501100852987812389473928699540834346158807043959118985815145779177143619698728131459483783202081474982171858011389071228250905826817436220577475921417653715687725614904582904992461028630081535583308130101987675856234343538955409175623400844887526162643568648833519463720377293240094456246923254350400678027273837755376406726898636241037491410966718557050759098100246789880178271925953381282421954028302759408448955014676668389697996886241636313376393903373455801407636741877711055384225739499110186468219696581651485130494222369947714763069155468217682876200362777257723781365331611196811280792669481887201298643660768551639860534602297871557517947385246369446923087894265948217008051120322365496288169035739121368338393591756418733850510970271613915439590991598154654417336311656936031122249937969999226781732358023111862644575299135758175008199839236284615249881088960232244362173771618086357015468484058622329792853875623486556440536962622018963571028812361567512543338303270029097668650568557157505516727518899194129711337690149916181315171544007728650573189557450920330185304847113818315407324053319038462084036421763703911550639789000742853672196280903477974533320468368795868580237952218629120080742819551317948157624448298518461509704888027274721574688131594750409732115080498190455803416826949787141316063210686391511681774304792596709376", z.toString());

        x = new Num(29);
        y = 15816L;
        z = Num.power(x, y);
        assertEquals("", z.toString());

//        x = new Num(2);
//        y = 10000000L;
//        z = Num.power(x, y);
//        assertEquals("", z.toString());
    }

    @Test
    void testSquareRoot() throws Exception {
        Num x, y;

        x = new Num(4);
        y = Num.squareRoot(x);
        assertEquals("2", y.toString());

        x = new Num(10);
        y = Num.squareRoot(x);
        assertEquals("3", y.toString());

        x = new Num(932663405025L);
        y = Num.squareRoot(x);
        assertEquals("965745", y.toString());

        x = new Num(9223372036854775807L);
        y = Num.squareRoot(x);
        assertEquals("3037000499", y.toString());

        x = new Num("7237005577332262210834635695349653859421902880380109739573089701262786560001");
        y = Num.squareRoot(x);
        assertEquals("85070591730234615847396907784232501249", y.toString());

        x = new Num(0);
        y = Num.squareRoot(x);
        assertEquals("0", y.toString());

        final Num z = new Num(-198);
        assertThrows(Exception.class, () -> {
            Num.squareRoot(z);
        });


        // keep this one commented, unless you want a long running loop!
//        x = new Num("");
//        y = Num.squareRoot(x);
//        assertEquals("", y.toString());
    }

    @Test
    void testMod() {
        Num x, y, z;

        x = new Num("123456789");
        y = new Num("4567");
        assertEquals("1645", Num.mod(x, y).toString());

        x = new Num("0");
        y = new Num("4567");
        assertEquals("0", Num.mod(x, y).toString());

        x = new Num("4567");
        y = new Num("0");
        assertEquals(null, Num.mod(x, y));

        x = new Num("123456789123456789123456789123456789123456789");
        y = new Num("123456789");
        assertEquals("0", Num.mod(x, y).toString());

        x = new Num("123456789123456789123456789123456789123456789");
        y = new Num("1234567891");
        assertEquals("781866112", Num.mod(x, y).toString());

        assertEquals(y.toString(), Num.mod(y, x).toString());

        x = new Num("22838422686555587263948685490152318882035472844501809360976087896337614957874991896849190676558796921891771164421806480340889836627951616");
        y = new Num("40159526927620481646000322676629816996929091843685756139806942025541935596108702291164656468513971532274808851070702075958251953125");
        assertEquals("20999033240315721469986534354994417873745732469330316998421948120519852741773482179860166649423259345569288706775360039616901389116", Num.mod(x, y).toString());
    }

    @Test
    void testConvertBase() {
        Num x = new Num(1234);
        Num y = x.convertBase(10);
        assertEquals("1234", y.printNumberByBase());

        y = y.convertBase(16);
        assertEquals("4d2", y.printNumberByBase());

        y = y.convertBase(10);
        assertEquals("1234", y.printNumberByBase());

        y = y.convertBase(8);
        assertEquals("2322", y.printNumberByBase());

        y = y.convertBase(2000);
        y.printNumberByBase();

        y = new Num(3);
        y = y.convertBase(2);
        assertEquals("3", y.toString());
    }

    @Test
    void testInfixToPostfixConversion() {
        String[] expression = {"3", "+", "4"};
        String[] expected = {"3", "4", "+"};
        String[] result = Num.convertInfixToPostfix(expression);
        assertTrue(Arrays.equals(expected, result));

        String[] expression2 = {"3", "+", "4", "*", "2", "/", "(", "1", "-", "5", ")", "^", "2", "^", "3"};
        // extra nulls because otherwise Arrays.equals fails!
        String[] expected2 = {"3", "4", "2", "*", "1", "5", "-", "2", "3", "^", "^", "/", "+"};
        String[] result2 = Num.convertInfixToPostfix(expression2);
        assertTrue(Arrays.equals(expected2, result2));

        String[] expression3 = {"(", "(", "3", "+", "5", ")", "-", "(", "4", "+", "5", ")", ")", "^", "2"};
        String[] expected3 = {"3", "5", "+", "4", "5", "+", "-", "2", "^"};
        String[] result3 = Num.convertInfixToPostfix(expression3);
        assertTrue(Arrays.equals(expected3, result3));
    }

    @Test
    void testInfixEvaluation() {
        String expectedString;
        String[] expression1 = {"0", "+", "0"};
        Num expected = new Num("0");
        Num result = Num.evaluateInfix(expression1);
        assertEquals(0, expected.compareTo(result));

        String[] expression2 = {"(", "(", "1", "+", "2", ")", "-", "3", ")", "-", "(", "4", "-", "5", ")"};
        expected = new Num(1);
        result = Num.evaluateInfix(expression2);
        assertEquals(0, result.compareTo(expected));

        String[] expression3 = {"2985984", "*", "1336336"};
        expected = new Num("3990277914624");
        result = Num.evaluateInfix(expression3);
        assertEquals(0, result.compareTo(expected));

        String[] expression4 = {"(", "(", "4568", "+", "7937", ")", "*", "(", "543", "+", "787", ")", ")", "^", "2"};
        expectedString = "276611781722500";
        result = Num.evaluateInfix(expression4);
        assertEquals(expectedString, result.toString());

        String[] expression5 = {"(", "(", "(", "(", "4568", "+", "7937", ")", "*", "(", "543", "+", "787", ")", ")", "^", "2", ")", "+", "(", "45", "^", "100", ")", ")"};
        expectedString = "2095324917039863304313251555826661356467173660585553096278749223514308239748113453774362345525549271530430449123445790860832162183502447305727400816977300690150863125";
        result = Num.evaluateInfix(expression5);
        assertEquals(expectedString, result.toString());

        String[] expression6 = {"(", "(", "(", "(", "4568", "+", "7937", ")", "*", "(", "543", "+", "787", ")", ")", "^", "2", ")", "*", "(", "45", "^", "100", ")", ")"};
        expectedString = "579591558589946089163934732124557974181023604338392314604791407230056195168788357056599510887136359643494310909402228558657891420610697944676426018872916756663471460342407226562500";
        result = Num.evaluateInfix(expression6);
        assertEquals(expectedString, result.toString());

        String[] expression7 = {"59", "^", "189"};
        expectedString = "49094201453858898563821909815715622898343840788307951790829058306066965277556690405198923330469181360047995792298590858320216851893709568850014603801957662304461999764512417471232096405932793406544518843353616811565660050247958484009364202138555194392211155816447162261055429393099785346263362040737435671744070513242674679684447717739";
        result = Num.evaluateInfix(expression7);
        assertEquals(expectedString, result.toString());

        String[] expression8 = {"15", "+", "15", "^", "2"};
        expectedString = "240";
        result = Num.evaluateInfix(expression8);
        assertEquals(expectedString, result.toString());

        String[] expression9 = {"91", "%", "2"};
        expectedString = "1";
        result = Num.evaluateInfix(expression9);
        assertEquals(expectedString, result.toString());
    }

    @Test
    void infixEvaluationFailures() {
        String[] expression1 = {"(", "9", "+", "10"};
        assertThrows(EmptyStackException.class, () -> {
            Num.evaluateInfix(expression1);
        });

        String[] expression2 = {};
        assertThrows(ArithmeticException.class, () -> {
            Num.evaluateInfix(expression2);
        });

        String[] expression3 = {"(", "(", "(", "(", "4568", "+", "7937", ")", "*", "(", "543", "+", "787", ")", ")", "^", "2", ")", "*", "45", "^", "100", ")", ")"};
        assertThrows(NoSuchElementException.class, () -> {
            Num.evaluateInfix(expression3);
        });
    }
}